import AbstractView from '../view';
export default class ScoreBoardView extends AbstractView {
  constructor() {
    super();
  }

  get template() {
    return `
<div class="end">
  <div class="scoreboard">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ</div>
  <br>
  <div class="repeat"><span class="repeat-action">–°—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ</span>&nbsp;|&nbsp;<span class="repeat-action">–í—ã–π—Ç–∏</a>üêå</div>
</div>`;
  }

  bind() {
    this.scoresElement = this.element.querySelector(`.scoreboard`);

    this.element.querySelector(`span.repeat-action`).onclick = (evt) => {
      evt.preventDefault();
      this.onRepeat();
    };
  }

  printScores(scores) {
    const content = scores.reverse().map((it, i) => `
<tr>
  <td><small>${i + 1}.</small></td>
  <td style="text-align: right;">${new Date(it.date).toDateString()}</td>
  <td style="text-align: right;">${it.time} —Å–µ–∫</td>
  <td>${new Array(3 - it.lives).fill(`üíî`).concat(new Array(it.lives).fill(`‚ù§Ô∏è`)).join(``)}</td>
</tr>`).join(``);

    this.scoresElement.innerHTML = `
<h1>–ú–æ–∏ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h1>
<table class="scores">
${content}
</table>`;
  }

  onRepeat() {

  }
}
